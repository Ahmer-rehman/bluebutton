<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	       xmlns:mx="http://www.adobe.com/2006/mxml" 
	       showCloseButton="true"
	       creationComplete="onCreationComplete()"
		   xmlns:mate="http://mate.asfusion.com/" 
		   title="{ResourceUtil.getInstance().getString('bbb.shortcuthelp.title')}"
		   height="700"
		   >
		   
	<mx:Script>
		<![CDATA[
			import flash.events.Event;
			import mx.collections.ArrayList;
			import mx.collections.ArrayCollection;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import org.bigbluebutton.common.LogUtil;
			
			private var genKeys:ArrayList;
			private var presKeys:ArrayList;
			private var chatKeys:ArrayList;
			private var audKeys:ArrayList;
			private var viewerKeys:ArrayList;
			private var pollKeys:ArrayList;
			
			private var genResource:Array = [/*'bbb.shortcutkey.general.minimize', 'bbb.shortcutkey.general.maximize',*/ 
											 'bbb.shortcutkey.flash.exit', 'bbb.shortcutkey.focus.viewers', 'bbb.shortcutkey.focus.listeners', 
											 'bbb.shortcutkey.focus.video', 'bbb.shortcutkey.focus.presentation', 'bbb.shortcutkey.focus.chat',
											 'bbb.shortcutkey.share.desktop', 'bbb.shortcutkey.share.microphone', 'bbb.shortcutkey.share.webcam',
											 'bbb.shortcutkey.shortcutWindow', 'bbb.shortcutkey.logout', 'bbb.shortcutkey.raiseHand', 
											 'bbb.shortcutkey.polling.buttonClick'];
											 
			private var presResource:Array = ['bbb.shortcutkey.present.focusslide', 'bbb.shortcutkey.whiteboard.undo', 
											  'bbb.shortcutkey.present.upload', 'bbb.shortcutkey.present.previous', 'bbb.shortcutkey.present.select',	
											  'bbb.shortcutkey.present.next', 'bbb.shortcutkey.present.fitWidth', 'bbb.shortcutkey.present.fitPage'];
			
			private var chatResource:Array = ['bbb.shortcutkey.chat.chatinput', 'bbb.shortcutkey.chat.focusTabs', 'bbb.shortcutkey.chat.focusBox',  
											  'bbb.shortcutkey.chat.changeColour', 'bbb.shortcutkey.chat.sendMessage', 'bbb.shortcutkey.chat.explanation',
											  'bbb.shortcutkey.chat.chatbox.gofirst', 'bbb.shortcutkey.chat.chatbox.goback', 'bbb.shortcutkey.chat.chatbox.repeat', 
											  'bbb.shortcutkey.chat.chatbox.advance', 'bbb.shortcutkey.chat.chatbox.golatest',  'bbb.shortcutkey.chat.chatbox.goread'];
											  
			private var audResource:Array = ['bbb.shortcutkey.listeners.muteme'];
			
			private var viewerResource:Array = ['bbb.shortcutkey.viewers.makePresenter'];
			
			private var pollResource:Array = ['bbb.shortcutkey.polling.focusTitle', 'bbb.shortcutkey.polling.focusQuestion', 'bbb.shortcutkey.polling.focusAnswers', 
											  'bbb.shortcutkey.polling.focusMultipleCB', 'bbb.shortcutkey.polling.focusWebPollCB', 'bbb.shortcutkey.polling.previewClick', 
											  'bbb.shortcutkey.polling.cancelClick', 'bbb.shortcutkey.polling.modify', 'bbb.shortcutkey.polling.publish', 
											  'bbb.shortcutkey.polling.save', 'bbb.shortcutkey.poll.explanation', 'bbb.shortcutkey.polling.focusData', 
											  'bbb.shortcutkey.polling.refresh'];
			
			[Bindable]
			private var shownKeys:ArrayCollection;
			
			private function init():void {
				
			}
			
			private function onCreationComplete():void {
				reloadKeys();
				ResourceUtil.getInstance().addEventListener(Event.CHANGE, reloadKeys); // Listen for locale changing
			}
			
			private function reloadKeys(e:Event = null):void {
				genKeys = loadGlobalKeys(genResource);
				
				presKeys = loadKeys(presResource);
				chatKeys = loadKeys(chatResource);
				audKeys = loadKeys(audResource);
				viewerKeys = loadKeys(viewerResource);
				pollKeys = loadKeys(pollResource);
				changeArray();
			}
			
			private function changeArray():void {
				shownKeys = new ArrayCollection();
				switch(categories.selectedIndex) {
				case 0: //General
					shownKeys.addAll(genKeys);
					break;
				case 1: //Presentation
					shownKeys.addAll(presKeys);
					break;
				case 2: //Chat
					shownKeys.addAll(chatKeys);
					break;
				case 3: //Audio
					shownKeys.addAll(audKeys);
					break;
				case 4: //Viewers
					shownKeys.addAll(viewerKeys);
					break;
				case 5: //Polling
					shownKeys.addAll(pollKeys);
					break;
				}
			}
			
			private function loadKeys(resource:Array):ArrayList {
				var keyList:ArrayList = new ArrayList();
				var keyCombo:String;
				var modifier:String;
				var indx:int = 255;
				for (var i:int = 0; i < resource.length; i++) {
					// Find the modifier key(s) for the user's browser
					modifier = ExternalInterface.call("determineLocalModifier");
					keyCombo = ResourceUtil.getInstance().getString(resource[i]);
					//indx = keyCombo.lastIndexOf("+") + 1;
					var key:int = int(keyCombo);
					var convKey:String;
					
					// Special cases where the keycodes don't render a sensible character
					switch (key) {
						case 32 :
							convKey = "Space";
						  	break;
						case 189 :
						  	convKey = "Minus";
						  	break;
						case 187 :
						  	convKey = "Plus";
						  	break;
						default:
							convKey = String.fromCharCode(key);
							break;
					}
					if (keyCombo == "----"){
						keyList.addItem({Shortcut:(ResourceUtil.getInstance().getString(resource[i] + '.function')), Function:""});
					}
					else{
						keyList.addItem({Shortcut:modifier + convKey, Function:(ResourceUtil.getInstance().getString(resource[i] + '.function'))});
					}
				}
				return keyList;
			}
			
			private function loadGlobalKeys(resource:Array):ArrayList {
				var keyList:ArrayList = new ArrayList();
				var keyCombo:String;
				var modifier:String;
				var indx:int = 255;
				for (var i:int = 0; i < resource.length; i++) {
					// Find the modifier key(s) for the user's browser
					modifier = ExternalInterface.call("determineGlobalModifier");
					keyCombo = ResourceUtil.getInstance().getString(resource[i]);
					//indx = keyCombo.lastIndexOf("+") + 1;
					var key:int = int(keyCombo);
					var convKey:String;
					
					// Special cases where the keycodes don't render a sensible character
					switch (key) {
						case 32 :
							convKey = "Space";
							break;
						case 189 :
							convKey = "Minus";
							break;
						case 187 :
							convKey = "Plus";
							break;
						default:
							convKey = String.fromCharCode(key);
							break;
					}
					
					if (keyCombo == "----"){
						keyList.addItem({Shortcut:(ResourceUtil.getInstance().getString(resource[i] + '.function')), Function:""});
					}
					else{
						keyList.addItem({Shortcut:modifier + convKey, Function:(ResourceUtil.getInstance().getString(resource[i] + '.function'))});
					}
				}
				return keyList;
			}
			
			public function focusCategories():void { //actually focuses the datagrid instead
				focusManager.setFocus(keyList);
				keyList.drawFocus(true);
			}
		]]>
	</mx:Script>
	
	<!-- Probably need to change this from a Label to something else. -->
	<mx:Label id="browserInfo" focusEnabled="true" accessibilityName="Placeholder for Browser Info"/>
	<mx:ComboBox id="categories" labelField="Please select an area for which to view shortcut keys: " 
				 editable="false" 
				 change="changeArray()"
				 tabIndex="5">
		<mx:ArrayCollection>
        	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.general")}</mx:String>
         	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.presentation")}</mx:String>
         	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.chat")}</mx:String>
         	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.audio")}</mx:String>
         	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.viewers")}</mx:String>
			<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.polling")}</mx:String>
      	</mx:ArrayCollection>
	</mx:ComboBox>
	<mx:DataGrid id="keyList" draggableColumns="false" dataProvider="{shownKeys}" width="100%" height="100%">
		<mx:columns>
			<mx:DataGridColumn dataField="Shortcut" />
			<mx:DataGridColumn dataField="Function" />
		</mx:columns>
	</mx:DataGrid>
</MDIWindow>