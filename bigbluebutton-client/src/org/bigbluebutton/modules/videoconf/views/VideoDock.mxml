<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	creationComplete="init()" 
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	xmlns:mate="http://mate.asfusion.com/"
	layout="horizontal"
	horizontalAlign="center"
	verticalAlign="middle"
	resize="onChildAdd()">

	<mx:Script>
		<![CDATA[

			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.videoconf.VideoWindowItf;
			import org.bigbluebutton.modules.videoconf.events.DragEvent;
			import org.bigbluebutton.modules.videoconf.events.CloseWindowEvent;
			import mx.events.ChildExistenceChangedEvent;

			private function init():void{
				this.showCloseButton = false;
			
				this.minWidth = 172;
				this.minHeight = 179;
				this.maxWidth = this.parent.width;
				this.maxHeight = this.parent.height;
				
				this.width = this.minWidth;
				this.height = this.minHeight;
				
				addEventListener(ChildExistenceChangedEvent.CHILD_ADD, onChildAdd);			
				addEventListener(ChildExistenceChangedEvent.CHILD_REMOVE, onChildRemove);
			}
			
			private function onChildAdd(e:ChildExistenceChangedEvent = null):void {
				updateChildrenDimensions(this.numChildren);
			}
			
			private function onChildRemove(e:ChildExistenceChangedEvent = null):void {
				updateChildrenDimensions(this.numChildren - 1);
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.POPUP;
			}
			
			private function onDragVideoWindow(e:DragEvent):void{
				if (hitTestPoint(e.globalPosition.x, e.globalPosition.y, true)) {
					if (e.window.parent != this)
						addVideoChild(e.window);
					else
						repositionWindow(e.window);
				} else {
					if (e.window.parent == this) {
						removeVideoChild(e.window);
						//LogUtil.debug("e.globalPosition " + e.globalPosition.toString());
						//LogUtil.debug("e.localPosition " + e.localPosition.toString());
						// \TODO position is not accurate
						e.window.x = e.globalPosition.x;
						e.window.y = e.globalPosition.y;
					}
				}
			}
			
			private function repositionWindow(window:MDIWindow):void {
				// \TODO reposition the window correctly between the windows
				setChildIndex(window, 0);
			}
			
			private function onCloseVideoWindow(e:CloseWindowEvent):void {
				removeVideoChild(e.window);
			}
			
			private function addVideoChild(window:MDIWindow):void {
				window.minimizeBtn.visible = false;
				window.maximizeRestoreBtn.visible = false;
				window.resizable = false;
				(window as VideoWindowItf).buttonsEnabled = false;
				this.parent.removeChild(window);
				this.addChild(window);
			}
			
			private function removeVideoChild(window:MDIWindow):void {
				window.minimizeBtn.visible = true;
				window.maximizeRestoreBtn.visible = true;
				window.resizable = true;
				(window as VideoWindowItf).buttonsEnabled = true;
				this.removeChild(window);
				this.parent.addChild(window);
			}
			
			override public function close(event:MouseEvent = null):void {
				while (this.numChildren > 0) {
					removeVideoChild(getChildren().pop());
				}
				//super.close(event);
				minimize();
			}
			
			private function updateChildrenDimensions(numChildren:Number):void {
				if (numChildren == 0) return;

				var availableWidth:Number = this.width
					- this.borderMetrics.left - this.borderMetrics.right
					- (numChildren - 1) * (getStyle("horizontalGap"));
					
				var availableHeight:Number = this.height
					- this.borderMetrics.top - this.borderMetrics.bottom;
					
				for (var i:int=0; i < getChildren().length; ++i) {
					var window:VideoWindowItf = getChildren()[i];
					window.width = Math.floor(availableWidth / numChildren);
					window.updateHeight();
					
					if (window.height > availableHeight) {
						window.height = availableHeight;
						window.updateWidth();
					}
				} 
			}

		]]>
	</mx:Script>

	<mate:Listener type="{DragEvent.DRAG}" method="onDragVideoWindow" />
	<mate:Listener type="{CloseWindowEvent.CLOSE_WINDOW}" method="onCloseVideoWindow" />
</MDIWindow>