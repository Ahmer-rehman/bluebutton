<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<CustomMdiWindow xmlns="org.bigbluebutton.common.*" 
			xmlns:mx="http://www.adobe.com/2006/mxml"
			implements="org.bigbluebutton.common.IBbbModuleWindow"
			title="Closed Caption"
			width="400" height="300"
			showCloseButton="false"
			creationComplete="onCreationComplete()" xmlns:views="org.bigbluebutton.modules.caption.views.*">
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.caption.events.RequestTranscriptsEvent;
			import org.bigbluebutton.modules.caption.events.SendEditCaptionHistoryEvent;
			import org.bigbluebutton.modules.caption.events.SendUpdateCaptionOwnerEvent;
			import org.bigbluebutton.modules.caption.model.Transcript;
			import org.bigbluebutton.modules.caption.model.Transcripts;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Bindable]
			private var transcriptsCollection:ArrayCollection;
			
			[Bindable]
			private var currentTranscript:Transcript;
			
			private var transcriptsObject:Transcripts;
			
			private var transcriptOwnerChangeWatcher:ChangeWatcher;
			
			private var _checkForOverwrite:Boolean = false;
			private var _checkForDeletePreviousWord:Boolean = false;
			private var _checkForDeleteNextWord:Boolean = false;
			private var _lastTextInput:String;
			private var _lastTextLength:int;
			private var _lastSelectionIndex:int;
			
			private function onCreationComplete():void {
				var requestTranscripts:RequestTranscriptsEvent = new RequestTranscriptsEvent(RequestTranscriptsEvent.REQUEST_TRANSCRIPTS_EVENT);
				requestTranscripts.callback = setTranscripts;
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(requestTranscripts);
				
				onFontSizeComboChange();
				onFontFamilyComboChange();
				
				BindingUtils.bindSetter(onLocaleComboChange, localeCombo, "selectedItem");
				
				inputArea.getInternalTextField().addEventListener(KeyboardEvent.KEY_DOWN, onTranscriptKeyDown);
				outputArea.getInternalTextField().type = TextFieldType.DYNAMIC;
			}
			
			private function setTranscripts(t:Transcripts):void {
				transcriptsObject = t;
				
				if (UserManager.getInstance().getConference().amIModerator()) {
					transcriptsCollection = new ArrayCollection();
					for each (var l:String in ResourceUtil.getInstance().localeNames) {
						transcriptsCollection.addItem({locale: l});
					}
					claimOwnershipButton.visible = true;
				} else {
					transcriptsCollection = t.transcriptCollection;
				}
				onLocaleComboChange();
				/*
				if (!t.historyIntited) {
					t.transcriptCollectionChangeCallback = handleHistoryInitialized;
				}
				*/
			}
			
			private function handleHistoryInitialized():void {
				onLocaleComboChange();
			}
			
			public function getPrefferedPosition():String {
				return MainCanvas.POPUP;
			}
			
			private function onTranscriptChange(event:Event):void {
				refreshTextArea();
			}
			
			private function refreshTextArea(refreshInputArea:Boolean=false):void {
				outputArea.text = currentTranscript.transcript;
				if (refreshInputArea){
					inputArea.text = currentTranscript.transcript;
				}
			}
			
			private function onFontSizeComboChange():void {
				inputArea.setStyle("fontSize", int(fontSizeCombo.selectedItem));
				outputArea.setStyle("fontSize", int(fontSizeCombo.selectedItem));
			}
			
			private function onFontFamilyComboChange():void {
				inputArea.setStyle("fontFamily", fontFamilyCombo.selectedItem);
				outputArea.setStyle("fontFamily", fontFamilyCombo.selectedItem);
			}
			
			private function onLocaleComboChange(o:Object=null):void {
				if (transcriptsCollection && localeCombo.selectedIndex != -1) {
					currentTranscript = transcriptsObject.findLocale(localeCombo.selectedItem.locale);
					
					if (transcriptOwnerChangeWatcher) {
						transcriptOwnerChangeWatcher.unwatch();
					}
					
					if (currentTranscript) {
						transcriptOwnerChangeWatcher = BindingUtils.bindSetter(onTranscriptOwnerIDChange, currentTranscript, "ownerID");
					}
				}
			}
			
			private function onTranscriptOwnerIDChange(o:Object):void {
				var ownerID:String = o as String;
				if (ownerID == "") {
					//unclaimed text
					ownerNameOutputLabel.text = "Owner - " + "None";
					inputGroup.visible = inputGroup.includeInLayout = false;
					outputGroup.visible = outputGroup.includeInLayout = true;
					inputArea.getInternalTextField().type = TextFieldType.DYNAMIC;
				} else if (ownerID == UserManager.getInstance().getConference().getMyUserId()) {
					//release text
					ownerNameInputLabel.text = "Owner - " + "You";
					inputGroup.visible = inputGroup.includeInLayout = true;
					outputGroup.visible = outputGroup.includeInLayout = false;
					inputArea.getInternalTextField().type = TextFieldType.INPUT;
					inputArea.text = currentTranscript.transcript;
				} else {
					//claimed by other
					ownerNameInputLabel.text = "Owner - " + UserManager.getInstance().getConference().getUser(ownerID).name;
					inputGroup.visible = inputGroup.includeInLayout = false;
					outputGroup.visible = outputGroup.includeInLayout = true;
					inputArea.getInternalTextField().type = TextFieldType.DYNAMIC;
				}
			}
			
			private function onTranscriptTextInput(e:TextEvent):void {
				trace("Text entered: " + e.text + ", carat begin:" + inputArea.selectionBeginIndex + ", end: " + inputArea.selectionEndIndex);
				
				// There is no surefire way to detect whether the internal TextField is in overwrite mode or not. We need to 
				// delay sending the message until after the text changes and then check length. This extra check is only 
				// required if the input is length 1 and nothing is selected because it would be a simple replace otherwise.
				if (e.text.length == 1 && inputArea.selectionBeginIndex == inputArea.selectionEndIndex) {
					_checkForOverwrite = true;
					_lastTextInput = e.text;
					_lastTextLength = inputArea.text.length;
				} else {
					respondToTextChange(e.text, inputArea.selectionBeginIndex, inputArea.selectionEndIndex);
				}
			}
			
			private function onTranscriptTextChange(e:Event):void {
				trace("transcript change: " + inputArea.text);
				
				if (_checkForOverwrite) {
					_checkForOverwrite = false;
					if (inputArea.text.length > _lastTextLength) { // not an overwrite
						respondToTextChange(_lastTextInput, inputArea.selectionBeginIndex-1, inputArea.selectionEndIndex-1);
					} else {											// an overwrite
						respondToTextChange(_lastTextInput, inputArea.selectionBeginIndex-1, inputArea.selectionEndIndex);
					}
					_lastTextInput = null;
					_lastTextLength = 0;
				} else if (_checkForDeletePreviousWord) {
					_checkForDeletePreviousWord = false;
					respondToTextChange("", _lastSelectionIndex-(_lastTextLength-inputArea.text.length), _lastSelectionIndex);
					_lastSelectionIndex = 0;
					_lastTextLength = 0;
				} else if (_checkForDeleteNextWord) {
					_checkForDeleteNextWord = false;
					respondToTextChange("", _lastSelectionIndex, _lastSelectionIndex+(_lastTextLength-inputArea.text.length));
					_lastSelectionIndex = 0;
					_lastTextLength = 0;
				}
			}
			
			private function onTranscriptDataChange(e:FlexEvent):void {
				trace("transcript change");
			}
			
			private function onTranscriptKeyDown(e:KeyboardEvent):void {
				// TODO: Need to make sure I handle the CTRL, SHIFT, and ALT cases because they are different
				var si:int = inputArea.selectionBeginIndex;
				var ei:int = inputArea.selectionEndIndex;
				switch (e.keyCode) {
					case Keyboard.BACKSPACE:
						if (e.ctrlKey || e.altKey) {
							_lastSelectionIndex = ei;
							_lastTextLength = inputArea.text.length;
							_checkForDeletePreviousWord = true;
							return;
						}
						if (si == ei) {
							if (si == 0) {
								return;
							}
							si--;
						}
						respondToTextChange("", si, ei);
						break;
					case Keyboard.DELETE:
						if (e.ctrlKey || e.altKey) {
							_lastSelectionIndex = si;
							_lastTextLength = inputArea.text.length;
							_checkForDeleteNextWord = true;
							return;
						}
						if (si == ei) {
							if (si == inputArea.length+1) {
								return ;
							}
							ei++;
						}
						respondToTextChange("", si, ei);
						break;
					case Keyboard.X:
						if (e.ctrlKey) {
							if (si != ei) {
								respondToTextChange("", si, ei);
							}
						}
						break;
				}
			}
			
			private function respondToTextChange(t:String, si:int, ei:int):void {
				var editHistoryEvent:SendEditCaptionHistoryEvent = new SendEditCaptionHistoryEvent(SendEditCaptionHistoryEvent.SEND_EDIT_CAPTION_HISTORY);
				editHistoryEvent.locale = currentTranscript.locale;
				editHistoryEvent.startIndex = si;
				editHistoryEvent.endIndex = ei;
				editHistoryEvent.text = t;
				
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(editHistoryEvent);
			}
			
			private function claimTranscript(locale:String, claim:Boolean):void {
				var updateCaptionOwnerEvent:SendUpdateCaptionOwnerEvent = new SendUpdateCaptionOwnerEvent(SendUpdateCaptionOwnerEvent.SEND_UPDATE_CAPTION_OWNER_EVENT);
				updateCaptionOwnerEvent.locale = locale;
				updateCaptionOwnerEvent.claim = claim;
				
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(updateCaptionOwnerEvent);
			}
			
			private function onClaimButtonClick():void {
				if (currentTranscript.ownerID == "") {
					claimTranscript(currentTranscript.locale, true);
				} else if (currentTranscript.ownerID == UserManager.getInstance().getConference().getMyUserId()) {
					claimTranscript(currentTranscript.locale, false);
				}
			}
			
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%" horizontalAlign="left">
		<mx:HBox width="100%" verticalAlign="middle">
			<mx:Label id="fontSizeLabel" text="Font Size:" />
			<mx:ComboBox id="fontSizeCombo" dataProvider="[8, 10, 12, 14, 16]" selectedIndex="2" change="onFontSizeComboChange()"/>
			<mx:Label id="fontColorLabel" text="Text Color:" />
			<mx:ColorPicker id="fontColorPicker" />
			<mx:Label id="backgroundColorLabel" text="Background Color:" />
			<mx:ColorPicker id="backgroundColorPicker" />
			<mx:Label id="fontFamilyLabel" text="Font Family:" />
			<mx:ComboBox id="fontFamilyCombo" dataProvider="['Arial', 'Calibri', 'Time New Roman', 'Comic Sans']" change="onFontFamilyComboChange()"/>
			<mx:ComboBox id="localeCombo" dataProvider="{transcriptsCollection}" labelField="locale" enabled="{transcriptsCollection.length > 0}" />
		</mx:HBox>
		<mx:VBox id="inputGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<mx:HBox width="100%" verticalAlign="middle" height="24">
				<mx:Label text="Input:" />
				<mx:Label id="ownerNameInputLabel" />
			</mx:HBox>
			<views:TextArea2 id="inputArea" width="100%" height="100%" textInput="onTranscriptTextInput(event)" change="onTranscriptTextChange(event)" dataChange="onTranscriptDataChange(event)" />
		</mx:VBox>
		<mx:VBox id="outputGroup" width="100%" height="100%">
			<mx:HBox width="100%" verticalAlign="middle" height="24">
				<mx:Label text="Output:" />
				<mx:Label id="ownerNameOutputLabel" />
				<mx:Button id="claimOwnershipButton" label="Take Ownership" height="22" visible="false" click="onClaimButtonClick()" />
			</mx:HBox>
			<views:TextArea2 id="outputArea" text="{currentTranscript.transcript}" width="100%" height="100%" />
		</mx:VBox>
	</mx:VBox>
</CustomMdiWindow>
