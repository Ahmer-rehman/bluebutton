<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:VBox xmlns="flexlib.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/" visible="false" backgroundColor="0xCCCCCC" cornerRadius="5" borderStyle="solid" 
	paddingBottom="3" paddingTop="3" paddingLeft="3" paddingRight="3" >
	
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="presenterMode" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="viewerMode" />
	<mate:Listener type="{WhiteboardButtonEvent.DISABLE_WHITEBOARD}" method="disableWhiteboard" />
	<mate:Listener type="{WhiteboardButtonEvent.ENABLE_WHITEBOARD}" method="enableWhiteboard" />
	<mate:Listener type="{StopWhiteboardModuleEvent.STOP_HIGHLIGHTER_MODULE_EVENT}" method="closeToolbar" />
	<mate:Listener type="{WhiteboardButtonEvent.CHANGE_TO_PENCIL}" method="setShapeToPencil" />
	<mate:Listener type="{WhiteboardSettingResetEvent.FILL_CHANGED}" method="resetFill" />
	<mate:Listener type="{WhiteboardSettingResetEvent.TRANSPARENCY_CHANGED}" method="resetTransparent" />
	<mate:Listener type="{WhiteboardSettingResetEvent.GRID_CHANGED}" method="resetGrid" />
	
	<mx:Style>
		.colorPickerStyle {
	      backgroundColor:#E5E6E7;
	      columnCount:12;
	      horizontalGap:0;
	      previewHeight:22;
	      previewWidth:45;
	      swatchGridBackgroundColor:#000000;
	      swatchGridBorderSize:0;
	      swatchHeight:60;
	      swatchHighlightColor:#FFFFFF;
	      swatchHighlightSize:1;
	      swatchWidth:12;
	      textFieldWidth:72;
	      verticalGap:0;
	   }

	</mx:Style>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			import mx.managers.CursorManager;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.present.events.PresentationEvent;
			import org.bigbluebutton.modules.present.ui.views.PresentationWindow;
			import org.bigbluebutton.modules.whiteboard.business.shapes.DrawObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.GraphicObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.SelectObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.TextObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.WhiteboardConstants;
			import org.bigbluebutton.modules.whiteboard.events.GraphicObjectFocusEvent;
			import org.bigbluebutton.modules.whiteboard.events.StopWhiteboardModuleEvent;
			import org.bigbluebutton.modules.whiteboard.events.ToggleGridEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardButtonEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardDrawEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardPresenterEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardSettingResetEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var images:Images = new Images();
			[Bindable] private var pencil_icon:Class = images.pencil_icon;
			[Bindable] private var undo_icon:Class = images.undo_icon;
			[Bindable] private var delete_icon:Class = images.delete_icon;
			[Bindable] private var rectangle_icon:Class = images.square_icon;
			[Bindable] private var ellipse_icon:Class = images.circle_icon;
			[Bindable] private var thick_icon:Class = images.whiteboard_thick;
			[Bindable] private var thin_icon:Class = images.whiteboard_thin;
			[Bindable] private var triangle_icon:Class = images.triangle_icon;
			[Bindable] private var line_icon:Class = images.line_icon;
			[Bindable] private var fill_icon:Class = images.fill_icon;
			[Bindable] private var transparency_icon:Class = images.transparency_icon;
			[Bindable] private var text_icon:Class = images.text_icon;
			[Bindable] private var eraser_icon:Class = images.eraser_icon;
			[Bindable] private var highlighter_icon:Class = images.highlighter_icon;
			[Bindable] private var select_icon:Class = images.select_icon;
			[Bindable] private var grid_icon:Class = images.grid_icon;
			
			public var canvas:WhiteboardCanvas;
			private var presentationWindow:PresentationWindow;
			
			[Bindable] private var colorPickerColours:Array = ['0x000000', '0xFFFFFF' , '0xFF0000', '0xFF8800',
                '0xCCFF00', '0x00FF00', '0x00FF88', '0x00FFFF', 
                '0x0088FF', '0x0000FF', '0x8800FF', '0xFF00FF',
				'0xC0C0C0'
			];
			
			/**
			 * Sets the type of shape we're drawing (pencil, rectangle, etc...) 
			 * @param s The type
			 * 
			 */		
			protected function setTool(gType:String, toolType:String):void{
				if(gType == WhiteboardConstants.TYPE_SHAPE) {
					canvas.setGraphicType(gType);
					canvas.setTool(toolType);
					if(!btnToggleTransparency.enabled)
						btnToggleTransparency.enabled = true;
					if(!btnToggleFill.enabled)
						btnToggleFill.enabled = true;
					switch(toolType){
						case DrawObject.PENCIL:
							btnSelect.selected = false;
							btnPenc.selected = true;
							btnEllipse.selected = false;
							btnRectangle.selected = false;
							btnTriangle.selected = false;
							btnLine.selected = false;
							btnText.selected = false;
							btnHighl.selected = false;
							btnEraser.selected = false;
							btnToggleFill.enabled = false;
							btnToggleTransparency.enabled = false;
							break;
						case DrawObject.HIGHLIGHTER:
							btnSelect.selected = false;
							btnPenc.selected = false;
							btnEllipse.selected = false;
							btnRectangle.selected = false;
							btnTriangle.selected = false;
							btnLine.selected = false;
							btnText.selected = false;
							btnHighl.selected = true;
							btnEraser.selected = false;
							btnToggleFill.enabled = false;
							btnToggleTransparency.enabled = false;
							break;
						case DrawObject.ELLIPSE:
							btnSelect.selected = false;
							btnPenc.selected = false;
							btnEllipse.selected = true;
							btnRectangle.selected = false;
							btnTriangle.selected = false;
							btnLine.selected = false;
							btnText.selected = false;
							btnHighl.selected = false;
							btnEraser.selected = false;
							break;
						case DrawObject.RECTANGLE:
							btnSelect.selected = false;
							btnPenc.selected = false;
							btnEllipse.selected = false;
							btnRectangle.selected = true;
							btnTriangle.selected = false;
							btnLine.selected = false;
							btnText.selected = false;
							btnHighl.selected = false;
							btnEraser.selected = false;
							break;
						case DrawObject.TRIANGLE:
							btnSelect.selected = false;
							btnPenc.selected = false;
							btnEllipse.selected = false;
							btnRectangle.selected = false;
							btnTriangle.selected = true;
							btnLine.selected = false;
							btnText.selected = false;
							btnHighl.selected = false;
							btnEraser.selected = false;
							break;
						case DrawObject.LINE:
							btnSelect.selected = false;
							btnPenc.selected = false;
							btnEllipse.selected = false;
							btnRectangle.selected = false;
							btnTriangle.selected = false;
							btnLine.selected = true;
							btnText.selected = false;
							btnHighl.selected = false;
							btnEraser.selected = false;
							btnToggleFill.enabled = false;
							break;
						case DrawObject.ERASER:
							btnSelect.selected = false;
							btnPenc.selected = false;
							btnEllipse.selected = false;
							btnRectangle.selected = false;
							btnTriangle.selected = false;
							btnLine.selected = false;
							btnText.selected = false;
							btnHighl.selected = false;
							btnEraser.selected = true;
							btnToggleFill.enabled = false;
							btnToggleTransparency.enabled = false;
							break;
					}
				} else if (gType == WhiteboardConstants.TYPE_TEXT) {
					btnSelect.selected = false;
					btnPenc.selected = false;
					btnEllipse.selected = false;
					btnRectangle.selected = false;
					btnTriangle.selected = false;
					btnLine.selected = false;
					btnText.selected = true;
					btnHighl.selected = false;
					btnEraser.selected = false;
					btnToggleFill.enabled = false;
					btnToggleTransparency.enabled = false;
					canvas.setGraphicType(gType);
					canvas.setTool(toolType);
				} else if (gType == WhiteboardConstants.TYPE_SELECTION) {
					switch(toolType) {
						case SelectObject.SELECT_TOOL:
							btnSelect.selected = true;
							btnPenc.selected = false;
							btnEllipse.selected = false;
							btnRectangle.selected = false;
							btnLine.selected = false;
							btnText.selected = false;
							btnHighl.selected = false;
							btnEraser.selected = false;
							btnToggleFill.enabled = false;
							btnToggleTransparency.enabled = false;
							break;
					}
					canvas.setGraphicType(gType);
					canvas.setTool(toolType);
				} 					
			}
			
			private function setShapeToPencil(e:WhiteboardButtonEvent):void{
				this.setTool(WhiteboardConstants.TYPE_SHAPE, DrawObject.PENCIL);
			}
			
			/**
			 * Sets the color 
			 * @param e event containing the color (e.target.selectedColor)
			 * 
			 */		
			protected function changeColor(e:Event):void{
				canvas.changeColor(e);
			}
			
			/**
			 * Sets the fill color 
			 * @param e event containing the color (e.target.selectedColor)
			 * 
			 */		
			protected function changeFillColor(e:Event):void{
				canvas.changeFillColor(e);
			}
			
			/**
			 * Sets the thickness 
			 * @param e event containing the thickness (e.target.value)
			 * 
			 */		
			protected function changeThickness(e:Event):void{
				canvas.changeThickness(e);
			}
			
			protected function toggleFill():void{
				canvas.toggleFill();
			}
			
			protected function toggleTransparency():void{
				canvas.toggleTransparency();
			}
			
			protected function resetFill(e:WhiteboardSettingResetEvent):void{
				btnToggleFill.enabled = e.value;
			}
			
			protected function resetTransparent(e:WhiteboardSettingResetEvent):void{
				btnToggleTransparency.selected = e.value;
			}
			
			protected function resetGrid(e:WhiteboardSettingResetEvent):void{
				btnToggleGrid.selected = e.value;
			}
			
			private function presenterMode(e:MadePresenterEvent):void{
				canvas.makeTextObjectsEditable(e);
			}
			
			private function viewerMode(e:MadePresenterEvent):void{
				canvas.makeTextObjectsUneditable(e);
			}
			
			private function showToolbar(e:PresentationEvent):void{
				this.visible = true;
			}
			
			private function sendUndoCommand():void{
				if (!canvas.isPageEmpty()) 
					dispatchEvent(new WhiteboardDrawEvent(WhiteboardDrawEvent.UNDO_GRAPHIC));
			}
			
			private function enableWhiteboard(event:WhiteboardButtonEvent = null):void{
				this.visible = true;
			}
			
			private function disableWhiteboard(event:WhiteboardButtonEvent = null):void{
				this.visible = false;
			}
			
			public function positionToolbar(window:PresentationWindow):void{
				presentationWindow = window;
				presentationWindow.addEventListener(MoveEvent.MOVE, setPositionAndDepth);
				presentationWindow.addEventListener(ResizeEvent.RESIZE, setPositionAndDepth);
				presentationWindow.addEventListener(MouseEvent.CLICK, setPositionAndDepth);
				this.x = presentationWindow.x - this.width - 3;
				this.y = presentationWindow.y;
				parent.setChildIndex(this, parent.numChildren-1);
			}
			
			private function setPositionAndDepth(e:Event = null):void{
				this.x = presentationWindow.x - this.width - 3;
				this.y = presentationWindow.y;
				parent.setChildIndex(this, parent.numChildren-1);
			}
			
			private function closeToolbar(e:StopWhiteboardModuleEvent):void{
				parent.removeChild(this);
			}
			
			private function buttonSettingToggle(buttonEvt:Event):void {
				if(buttonEvt.target == btnToggleFill) {
					toggleFill();
				} else if(buttonEvt.target == btnToggleTransparency) {		
					toggleTransparency();
				}
			}
		]]>
	</mx:Script>
	
	<!-- Now, every 'tool' has two types of identifiers, one is found in WhiteboardConstants
	that identifies the "category" of the tool (ex. shape vs text), and the other specifies the 
	tool itself (ex. line tool vs triangle tool, even though both are "shapes")
	-->
	
	<mx:Button width="20" height="20" id="btnSelect" click="setTool(WhiteboardConstants.TYPE_SELECTION, SelectObject.SELECT_TOOL)"  icon="{select_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.toolbar.select')}" toggle="true"/>
	<mx:Button width="20" height="20" id="btnPenc" click="setTool(WhiteboardConstants.TYPE_SHAPE, DrawObject.PENCIL)"  icon="{pencil_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.pencil')}" toggle="true" selected="true" />
	<mx:Button width="20" height="20" id="btnHighl" click="setTool(WhiteboardConstants.TYPE_SHAPE, DrawObject.HIGHLIGHTER)"  icon="{highlighter_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.highlighter')}" toggle="true"/>
	<mx:Button width="20" height="20" id="btnRectangle" click="setTool(WhiteboardConstants.TYPE_SHAPE, DrawObject.RECTANGLE)" icon="{rectangle_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.rectangle')}" toggle="true" />
	<mx:Button width="20" height="20" id="btnEllipse" click="setTool(WhiteboardConstants.TYPE_SHAPE, DrawObject.ELLIPSE)" icon="{ellipse_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.ellipse')}" toggle="true" />
	<mx:Button width="20" height="20" id="btnTriangle" click="setTool(WhiteboardConstants.TYPE_SHAPE, DrawObject.TRIANGLE)" icon="{triangle_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.toolbar.triangle')}" toggle="true" />
	<mx:Button width="20" height="20" id="btnLine" click="setTool(WhiteboardConstants.TYPE_SHAPE, DrawObject.LINE)" icon="{line_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.toolbar.line')}" toggle="true" />
	<mx:Button width="20" height="20" id="btnText" click="setTool(WhiteboardConstants.TYPE_TEXT, TextObject.TEXT_TOOL)" icon="{text_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.toolbar.text')}" toggle="true" />
	<mx:Button width="20" height="20" id="btnEraser" click="setTool(WhiteboardConstants.TYPE_SHAPE, DrawObject.ERASER)" icon="{eraser_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.toolbar.eraser')}" toggle="true" />
	<mx:Button width="20" height="20" id="btnToggleGrid" click="dispatchEvent(new ToggleGridEvent(ToggleGridEvent.TOGGLE_GRID));" icon="{grid_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.texttoolbar.toggleGrid')}" toggle="true" />
	
	<mx:Spacer height="5" />
	<mx:Button width="20" height="20" id="btnToggleFill" click="buttonSettingToggle(event)" icon ="{fill_icon}"
			   toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.toolbar.toggleFill')}" toggle="true"/>
	<mx:ColorPicker change="changeFillColor(event)" id="cfillpik" selectedColor="0x000000" 
					toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.toolbar.fillColorPicker')}"/>
	<mx:Button width="20" height="20" id="btnToggleTransparency" click="buttonSettingToggle(event)" icon ="{transparency_icon}"
			   toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.toolbar.toggleTransparency')}" toggle="true"/>
	
	<mx:Spacer height="5" />
	<mx:Button width="20" height="20" id="btnClear" click="dispatchEvent(new WhiteboardDrawEvent(WhiteboardDrawEvent.CLEAR_BOARD))" icon="{delete_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.clear')}" />
	<mx:Button width="20" height="20" id="btnUndo"  click="sendUndoCommand()" icon="{undo_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.undo')}" />
	
	<mx:Spacer height="5" />
	
	<!--
	Properties that were removed from original color picker:
	
	swatchPanelStyleName="colorPickerStyle" 
	dataProvider="{colorPickerColours}"
	-->
	
	<!-- Layout is really bad right now, and is confusing. Basically, there are two 
	of ColorPickers, one for the "line" color for the outlines of shapes, and the other for
	the "fill" color that is used only if "fill" is enabled in WhiteboardCanvasModel
	-->
	<mx:ColorPicker change="changeColor(event)" id="cpik"  selectedColor="0x000000" 
					toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.color')}"/>
	
	<mx:Spacer height="3" />
	<mx:Image source="{thick_icon}" horizontalAlign="center" width="20"/>
	<mx:VSlider height="50" id="sld" change="changeThickness(event)" toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.thickness')}" minimum="2" maximum="20" 
				useHandCursor="true" value="2" showDataTip="true" snapInterval="1" dataTipOffset="0" labelOffset="0" />
	<mx:Image source="{thin_icon}" horizontalAlign="center" width="20" />
	
</mx:VBox>
