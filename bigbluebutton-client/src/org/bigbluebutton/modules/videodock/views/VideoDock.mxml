<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	creationComplete="init()" 
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	title="{ResourceUtil.getInstance().getString('bbb.videodock.title')}"
	xmlns:mate="http://mate.asfusion.com/"
	layout="horizontal"
	horizontalAlign="center"
	verticalAlign="middle"
	resize="onChildAdd()"
	backgroundColor="0xDDDDDD">

	<mx:Script>
		<![CDATA[

			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.events.DragWindowEvent;
			import org.bigbluebutton.common.events.CloseWindowEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.videoconf.VideoWindowItf;
			import org.bigbluebutton.modules.videoconf.events.OpenVideoWindowEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			import mx.events.ChildExistenceChangedEvent;

			public var autoDock:Boolean = false;
			private var childrenDimension:Array = new Array();

			private function init():void{
				this.showCloseButton = false;
			
				this.minWidth = 172;
				this.minHeight = 179;
				this.maxWidth = this.parent.width;
				this.maxHeight = this.parent.height;
				
				this.width = this.minWidth;
				this.height = this.minHeight;
				
				addEventListener(ChildExistenceChangedEvent.CHILD_ADD, onChildAdd);			
				addEventListener(ChildExistenceChangedEvent.CHILD_REMOVE, onChildRemove);
				addEventListener(MouseEvent.DOUBLE_CLICK, onDoubleClick);
			}
			
			private function onChildAdd(e:ChildExistenceChangedEvent = null):void {
				updateChildrenDimensions(this.numChildren);
			}
			
			private function onChildRemove(e:ChildExistenceChangedEvent = null):void {
				updateChildrenDimensions(this.numChildren - 1);
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.BOTTOM_RIGHT;
			}
			
			private function onDragVideoWindow(e:DragWindowEvent):void{
                if (e.mode == DragWindowEvent.DRAG_START) {
                    removeVideoChild(e.window as VideoWindowItf);
                } else if (e.mode == DragWindowEvent.DRAG_END
                        && hitTestPoint(e.mouseGlobal.x, e.mouseGlobal.y, true)) {
                    addVideoChild(e.window as VideoWindowItf);
                }
			}
			
			private function repositionWindow(window:MDIWindow):void {
				// \TODO reposition the window correctly between the windows
				setChildIndex(window, 0);
			}
			
			private function isVideoWindow(window:Object):Boolean {
				return (getQualifiedSuperclassName(window) == "org.bigbluebutton.modules.videoconf::VideoWindowItf")
			}
			
			private function onCloseWindow(e:CloseWindowEvent):void {
				if (isVideoWindow(e.window))
					removeVideoChild(e.window as VideoWindowItf);
			}
			
			private function onOpenWindow(e:OpenVideoWindowEvent):void {
				if (isVideoWindow(e.window) && autoDock)
					addVideoChild(e.window as VideoWindowItf);
			}
			
			private function addVideoChild(window:VideoWindowItf):void {
				LogUtil.debug("Docking window");
				
				// saves the window dimensions to restore it later
				var dimensions:Object = {width:window.width, height:window.height};
				childrenDimension[window] = dimensions;
				
				window.minimizeBtn.visible = false;
				window.maximizeRestoreBtn.visible = false;
				window.resizable = false;
				window.buttonsEnabled = false;
				if (this.parent != null)
					this.parent.removeChild(window);
				this.addChild(window);
			}
			
			private function removeVideoChild(window:VideoWindowItf):void {
			    if (!this.contains(window))
			        return;
			
				window.minimizeBtn.visible = true;
				window.maximizeRestoreBtn.visible = true;
				window.resizable = true;
				window.buttonsEnabled = true;
				this.removeChild(window);
				this.parent.addChild(window);

				// restores window dimensions
				window.width = childrenDimension[window].width;
				window.height = childrenDimension[window].height;
				window.updateWidth();
			}
			
			override public function removeAllChildren():void {
				while (this.numChildren > 0) {
					removeVideoChild(getChildren().pop());
				}
				super.removeAllChildren();
			}
			
			override public function close(event:MouseEvent = null):void {
				removeAllChildren();
				//super.close(event);
				minimize();
			}
			
			private function updateChildrenDimensions(numChildren:Number):void {
				if (numChildren == 0) return;

				var availableWidth:Number = this.width
					- this.borderMetrics.left - this.borderMetrics.right
					- (numChildren - 1) * (getStyle("horizontalGap"));
					
				var availableHeight:Number = this.height
					- this.borderMetrics.top - this.borderMetrics.bottom;
					
				for (var i:int=0; i < getChildren().length; ++i) {
					var window:VideoWindowItf = getChildren()[i];
					window.width = Math.floor(availableWidth / numChildren);
					window.updateHeight();
					
					if (window.height > availableHeight) {
						window.height = availableHeight;
						window.updateWidth();
					}
				} 
			}

			protected function onDoubleClick(event:MouseEvent = null):void {
				this.maximizeRestore();
			}
			
            override protected function resourcesChanged():void{
                super.resourcesChanged();
                this.title = ResourceUtil.getInstance().getString('bbb.videodock.title');
            }			

		]]>
	</mx:Script>

	<mate:Listener type="{DragWindowEvent.DRAG_WINDOW_EVENT}" method="onDragVideoWindow" />
	<mate:Listener type="{OpenVideoWindowEvent.OPEN_VIDEO_WINDOW_EVENT}" method="onOpenWindow" />
	<mate:Listener type="{CloseWindowEvent.CLOSE_WINDOW_EVENT}" method="onCloseWindow" />
</MDIWindow>