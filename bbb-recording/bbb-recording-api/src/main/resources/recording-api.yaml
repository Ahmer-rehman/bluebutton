openapi: 3.0.1
info:
  title: Big Blue Button
  description: Recording API specification for Big Blue Button
  termsOfService: http://swagger.io/terms/
  contact:
    email: ralam@blindsidenetworks.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.0
externalDocs:
  description: Find out more about Big Blue Button
  url: http://docs.bigbluebutton.org
servers:
  - url: https://bigbluebutton.org/bigbluebutton/api/v2
tags:
  - name: recording
    description: Access to meeting recordings
    externalDocs:
      description: Find out more
      url: http://docs.bigbluebutton.org

paths:
  /recordings:
    get:
      tags:
        - recording
      summary: Returns recordings
      operationId: searchRecordings
      parameters:
        - in: query
          name: meetingID
          schema:
            type: string
          description: "A meeting ID for get the recordings. It can be a set of meetingIDs separate by commas. If the meeting ID is not specified, it will get ALL the recordings. If a recordID is specified, the meetingID is ignored."
        - in: query
          name: recordID
          schema:
            type: string
          description: "A record ID for get the recordings. It can be a set of recordIDs separate by commas. If the record ID is not specified, it will use meeting ID as the main criteria. If neither the meeting ID is specified, it will get ALL the recordings. The recordID can also be used as a wildcard by including only the first characters in the string."
        - in: query
          name: state
          schema:
            type: string
          description: "Since version 1.0 the recording has an attribute that shows a state that Indicates if the recording is [processing|processed|published|unpublished|deleted]. The parameter state can be used to filter results. It can be a set of states separate by commas. If it is not specified only the states [published|unpublished] are considered (same as in previous versions). If it is specified as “any”, recordings in all states are included."
        - in: query
          name: meta
          schema:
            type: string
          description: "You can pass one or more metadata values to filter the recordings returned. The format of these parameters is the same as the metadata passed to the create call."
          example: "meta_presenter=joe&meta_category=education"
        - in: query
          name: page
          schema:
            type: integer
          description: "Page number"
        - in: query
          name: size
          schema:
            type: integer
          description: "Page size"
      responses:
        200:
          $ref: '#/components/responses/Hateoas'
        404:
          $ref: '#/components/responses/NotFound'
        405:
          $ref: '#/components/responses/ValidationError'
      security:
        - api_key: []
      x-codegen-request-body-name: body

  /recordings/{recordID}:
    get:
      tags:
        - recording
      summary: Retrieve a single recording
      operationId: getRecording
      parameters:
        - name: recordID
          in: path
          description: ID of the recording to be retrieved
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Recording'
        404:
          $ref: '#/components/responses/NotFound'
        405:
          $ref: '#/components/responses/ValidationError'
      security:
        - api_key: []
    delete:
      tags:
        - recording
      summary: Delete a recording
      operationId: deleteRecording
      parameters:
        - name: recordID
          in: path
          description: ID of the recording to be deleted
          required: true
          schema:
            type: string
      responses:
        204:
          description: Recording was successfully deleted
          content: {}
        404:
          $ref: '#/components/responses/NotFound'
        405:
          $ref: '#/components/responses/ValidationError'
      security:
        - api_key: []
    post:
      tags:
        - recording
      summary: Update the metadata of an existing recording
      operationId: updateRecording
      parameters:
        - name: recordID
          in: path
          description: ID of the recording to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Metadata key/value pairs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordingMetadata'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecordingMetadata'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Hateoas'
        404:
          $ref: '#/components/responses/NotFound'
        405:
          $ref: '#/components/responses/ValidationError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
    put:
      tags:
        - recording
      summary: Publish/unpublish recording
      operationId: publishRecording
      parameters:
        - name: recordID
          in: path
          description: ID of the recording to be updated
          required: true
          schema:
            type: string
        - in: query
          name: publish
          schema:
            type: string
          description: "Boolean value indicating whether the recording should be published"
      responses:
        200:
          $ref: '#/components/responses/Hateoas'
        404:
          $ref: '#/components/responses/NotFound'
        405:
          $ref: '#/components/responses/ValidationError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  /recordings/{recordID}/tracks:
    get:
      tags:
        - recording
      summary: Retrieve recording text tracks
      operationId: getRecordingTextTracks
      parameters:
        - name: recordID
          in: path
          description: ID of the recording
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: ''
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - api_key: []
      x-codegen-request-body-name: body
    post:
      tags:
        - recording
      summary: Upload text track for a recording
      operationId: addRecordingTextTrack
      parameters:
        - name: recordID
          in: path
          description: ID of the recording
          required: true
          schema:
            type: string
      requestBody:
        description: Text track file and details
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                kind:
                  type: string
                lang:
                  type: string
                label:
                  type: string
                file:
                  type: string
                  format: binary
        required: true
      responses:
        200:
          $ref: '#/components/responses/Hateoas'
        404:
          $ref: '#/components/responses/NotFound'
        405:
          $ref: '#/components/responses/ValidationError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  /recordings/{recordID}/events:
    get:
      tags:
        - recording
      summary: Retrieve summary of meeting events
      operationId: getMeetingSummary
      parameters:
        - name: recordID
          in: path
          description: ID of the recording
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Hateoas'
        404:
          $ref: '#/components/responses/NotFound'
        405:
          $ref: '#/components/responses/ValidationError'
      security:
        - api_key: []
      x-codegen-request-body-name: body

components:
  schemas:
    Recording:
      type: object
      properties:
        recordId:
          type: string
        meetingId:
          type: string
        internalMeetingId:
          type: string
        name:
          type: string
        isBreakout:
          type: boolean
        published:
          type: boolean
        state:
          type: string
        startTime:
          type: integer
          format: int64
        endTime:
          type: integer
          format: int64
        participants:
          type: integer
          format: int32
        rawSize:
          type: integer
          format: int64
        metadata:
          $ref: '#/components/schemas/RecordingMetadata'
        size:
          type: integer
          format: int64
        playback:
          $ref: '#/components/schemas/Playback'
      xml:
        name: recordingResponse
    RecordingMetadata:
      type: object
      additionalProperties:
        type: string
      xml:
        name: recordingMetadata
    Playback:
      type: object
      properties:
        format:
          type: object
          properties:
            type:
              type: string
            url:
              type: string
            processingTime:
              type: integer
              format: int32
            length:
              type: integer
              format: int32
            size:
              type: integer
              format: int64
            preview:
              type: object
              properties:
                images:
                  type: array
                  items:
                    $ref: '#/components/schemas/Image'
      xml:
        name: playback
    Image:
      type: object
      properties:
        alt:
          type: string
          xml:
            attribute: true
        height:
          type: integer
          format: int32
          xml:
            attribute: true
        width:
          type: integer
          format: int32
          xml:
            attribute: true
        src:
          type: string
          xml:
            attribute: true
      xml:
        name: img
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        description:
          type: string
      xml:
        name: error
    Link:
      type: object
      properties:
        rel:
          type: string
        href:
          type: string
      xml:
        name: link

  responses:
    Default:
      description: An unexpected error occurred
      content:
        application/json:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties: {}
              errors:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
        application/xml:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties: {}
              errors:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
            xml:
              name: default

    Hateoas:
      description: Request successful
      content:
        application/json:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties:
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
              errors:
                type: object
                properties: {}
        application/xml:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties:
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
              errors:
                type: object
                properties: {}
            xml:
              name: hateoas
    InvalidID:
      description: Invalid ID provided
      content:
        application/json:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties: {}
              errors:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
        application/xml:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties: {}
              errors:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
            xml:
              name: invalidID
    NotFound:
      description: The specified resource could not be found
      content:
        application/json:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties: {}
              errors:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
        application/xml:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties: {}
              errors:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
            xml:
              name: notFound
    Recording:
      description: Recording successfully retrieved
      content:
        application/json:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties:
                  recording:
                    $ref: '#/components/schemas/Recording'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
              errors:
                type: object
                properties: {}
        application/xml:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties:
                  recording:
                    $ref: '#/components/schemas/Recording'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
              errors:
                type: object
                properties: {}
            xml:
              name: recording
    Recordings:
      description: Recordings successfully retrieved
      content:
        application/json:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties:
                  recordings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recording'
              errors:
                type: object
                properties: {}
        application/xml:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties:
                  recordings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recording'
              errors:
                type: object
                properties: {}
            xml:
              name: recordings
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties: {}
              errors:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
        application/xml:
          schema:
            type: object
            properties:
              payload:
                type: object
                properties: {}
              errors:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
            xml:
              name: validationError

  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header