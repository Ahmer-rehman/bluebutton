import { CreatedInstance } from "../CreatedInstance";
import { Scene, Nullable, DirectionalLight, ShadowGenerator } from "@babylonjs/core";
import DeferredCreationLifecycleListener from "./DeferredCreationLifecycleListener";
/**
 * Create a Shadow Generator (CascadedShadowGenerator extends ShadowGenerator, so add/remove shadow casters is from parent class)
 */
export default abstract class BaseShadowGeneratorLifecycleListener<T extends ShadowGenerator> extends DeferredCreationLifecycleListener<T> {
    private onMeshAddedObservable;
    private onMeshRemovedObservable;
    constructor(scene: Scene, props: any);
    abstract createShadowGenerator: (mapSize: number, light: DirectionalLight, useFullFloatFirst?: boolean) => T;
    abstract get generatorType(): string;
    createInstance: (instance: CreatedInstance<T>, scene: Scene, props: any) => Nullable<T>;
    onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>): any;
    onChildAdded(child: CreatedInstance<any>, parent: CreatedInstance<any>): any;
    onUnmount(): void;
}
