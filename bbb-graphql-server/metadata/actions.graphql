type Mutation {
  allUsersClearEmoji: Boolean
}

type Mutation {
  allUsersClearReaction: Boolean
}

type Mutation {
  breakoutRoomCreate(
    record: Boolean!
    captureNotes: Boolean!
    captureSlides: Boolean!
    durationInMinutes: Int!
    sendInviteToModerators: Boolean!
    rooms: [BreakoutRoom]!
  ): Boolean
}

type Mutation {
  breakoutRoomEndAll: Boolean
}

type Mutation {
  breakoutRoomMoveUser(
    userId: String!
    fromBreakoutRoomId: String!
    toBreakoutRoomId: String!
  ): Boolean
}

type Mutation {
  breakoutRoomRequestJoinUrl(
    breakoutRoomId: String!
  ): Boolean
}

type Mutation {
  breakoutRoomSendMessageToAll(
    msg: String!
  ): Boolean
}

type Mutation {
  breakoutRoomSetTime(
    timeInMinutes: Int!
  ): Boolean
}

type Mutation {
  chatCreateWithUser(
    userId: String!
  ): Boolean
}

type Mutation {
  chatPublicClearHistory: Boolean
}

type Mutation {
  chatRemove(
    chatId: String!
  ): Boolean
}

type Mutation {
  chatSendMessage(
    chatId: String!
    chatMessageInMarkdownFormat: String!
  ): Boolean
}

type Mutation {
  chatSetTyping(
    chatId: String
  ): Boolean
}

type Mutation {
  dispatchPluginDataChannelMessageMsg(
    pluginName: String!
    dataChannel: String!
    payloadJson: String!
    toRoles: [String]!
    toUserIds: [String]!
  ): Boolean
}

type Mutation {
  pickRandomViewer: Boolean
}

type Mutation {
  pollCancel: Boolean
}

type Mutation {
  pollCreate(
    pollId: String!
    pollType: String!
    secretPoll: Boolean!
    question: String!
    isMultipleResponse: Boolean!
    answers: [String]
  ): Boolean
}

type Mutation {
  pollPublishResult(
    pollId: String!
  ): Boolean
}

type Mutation {
  pollSubmitUserTypedVote(
    pollId: String!
    answer: String!
  ): Boolean
}

type Mutation {
  pollSubmitUserVote(
    pollId: String!
    answerIds: [Int]
  ): Boolean
}

type Mutation {
  presAnnotationDelete(
    pageId: String!
    annotationsIds: [String]!
  ): Boolean
}

type Mutation {
  presAnnotationDeleteAll(
    pageId: String!
  ): Boolean
}

type Mutation {
  presAnnotationSubmit(
    pageId: String!
    annotations: [String]!
  ): Boolean
}

type Mutation {
  presentationRemove(
    presentationId: String!
  ): Boolean
}

type Mutation {
  presentationRequestUploadToken(
    podId: String!
    filename: String!
    uploadTemporaryId: String!
  ): Boolean
}

type Mutation {
  presentationSetCurrent(
    presentationId: String!
  ): Boolean
}

type Mutation {
  presentationSetDownloadable(
    presentationId: String!
    downloadable: Boolean!
    fileStateType: String!
  ): Boolean
}

type Mutation {
  presentationSetPage(
    presentationId: String!
    pageId: String!
  ): Boolean
}

type Mutation {
  presentationSetRenderedInToast(
    presentationId: String!
  ): Boolean
}

type Mutation {
  timerActivate(
    stopwatch: Boolean!
    running: Boolean!
    time: Int!
    track: String
  ): Boolean
}

type Mutation {
  timerDeactivate: Boolean
}

type Mutation {
  timerReset: Boolean
}

type Mutation {
  timerSetSongTrack(
    track: String!
  ): Boolean
}

type Mutation {
  timerSetTime(
    time: Int!
  ): Boolean
}

type Mutation {
  timerStart: Boolean
}

type Mutation {
  timerStop(
    accumulated: Float!
  ): Boolean
}

type Mutation {
  timerSwitchMode(
    stopwatch: Boolean!
  ): Boolean
}

type Mutation {
  userEjectFromMeeting(
    userId: String!
    banUser: Boolean!
  ): Boolean
}

type Mutation {
  userJoinMeeting(
    authToken: String!
    clientType: String!
  ): Boolean
}

type Mutation {
  userLeaveMeeting: Boolean
}

type Mutation {
  userSetAway(
    away: Boolean!
  ): Boolean
}

type Mutation {
  userSetCameraPinned(
    userId: String!
    pinned: Boolean!
  ): Boolean
}

type Mutation {
  userSetEmojiStatus(
    emoji: String!
  ): Boolean
}

type Mutation {
  userSetExitReason(
    exitReason: String!
  ): Boolean
}

type Mutation {
  userSetLocked(
    userId: String!
    locked: Boolean!
  ): Boolean
}

type Mutation {
  userSetMobileFlag(
    mobile: Boolean!
  ): Boolean
}

type Mutation {
  userSetPresenter(
    userId: String!
  ): Boolean
}

type Mutation {
  userSetRaiseHand(
    raiseHand: Boolean!
    userId: String
  ): Boolean
}

type Mutation {
  userSetReactionEmoji(
    reactionEmoji: String!
  ): Boolean
}

type Mutation {
  userSetRole(
    userId: String!
    role: String!
  ): Boolean
}

type Mutation {
  userSetSpeechLocale(
    locale: String!
    provider: String!
  ): Boolean
}

type Mutation {
  userTransferVoiceToMeeting(
    fromMeetingId: String!
    toMeetingId: String!
  ): Boolean
}

input BreakoutRoom {
  captureNotesFilename: String!
  captureSlidesFilename: String!
  freeJoin: Boolean!
  isDefaultName: Boolean!
  name: String!
  sequence: Int!
  shortName: String!
  users: [String]!
}

