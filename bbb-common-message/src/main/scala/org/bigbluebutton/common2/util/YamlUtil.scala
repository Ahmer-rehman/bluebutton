package org.bigbluebutton.common2.util

import java.util

object YamlUtil {
  def mergeLinkedHashMap(target: util.LinkedHashMap[String, Object], source: util.LinkedHashMap[String, Object]): Unit = {
    // This function is used to merge LinkedHashMap with unknown depths generated by a YAML parser lib
    val sourceIterator = source.entrySet().iterator()
    while (sourceIterator.hasNext) {
      val entry = sourceIterator.next()
      val key = entry.getKey
      val sourceValue = entry.getValue

      if (target.containsKey(key)) {
        val targetValue = target.get(key)

        if (sourceValue.isInstanceOf[util.LinkedHashMap[_, _]] && targetValue.isInstanceOf[util.LinkedHashMap[_, _]]) {
          // If both source and target values are LinkedHashMaps, recursively merge them.
          mergeLinkedHashMap(targetValue.asInstanceOf[util.LinkedHashMap[String, Object]], sourceValue.asInstanceOf[util.LinkedHashMap[String, Object]])
        } else {
          // If not, replace the target value with the source value.
          target.put(key, sourceValue)
        }
      }
    }
  }
}
