package org.bigbluebutton.api.meeting.create

object CreateParams {
  val ALLOW_START_STOP_RECORDING = "allowStartStopRecording"
  val ATTENDEE_PW = "attendeePW"
  val AUTO_START_RECORDING = "autoStartRecording"
  val BANNER_COLOR = "bannerColor"
  val BANNER_TEXT = "bannerText"
  val CHECKSUM = "checksum"
  val COPYRIGHT = "copyright"
  val DIAL_NUMBER = "dialNumber"
  val DURATION = "duration"
  val FREE_JOIN = "freeJoin"
  val FULL_NAME = "fullName"
  val GUEST_POLICY = "guestPolicy"
  val MEETING_LAYOUT = "meetingLayout"
  val IS_BREAKOUT = "isBreakout"
  val LOGO = "logo"
  val LOGOUT_TIMER = "logoutTimer"
  val LOGOUT_URL = "logoutURL"
  val MAX_PARTICIPANTS = "maxParticipants"
  val MEETING_ID = "meetingID"
  val META = "meta"
  val MODERATOR_ONLY_MESSAGE = "moderatorOnlyMessage"
  val MODERATOR_PW = "moderatorPW"
  val MUTE_ON_START = "muteOnStart"
  val MEETING_KEEP_EVENTS = "meetingKeepEvents"
  val ALLOW_MODS_TO_UNMUTE_USERS = "allowModsToUnmuteUsers"
  val ALLOW_REQUESTS_WITHOUT_SESSION = "allowRequestsWithoutSession"
  val ALLOW_MODS_TO_EJECT_CAMERAS = "allowModsToEjectCameras"
  val NAME = "name"
  val PARENT_MEETING_ID = "parentMeetingID"
  val PASSWORD = "password"
  val RECORD = "record"
  val RECORD_ID = "recordID"
  val REDIRECT = "redirect"
  val SEQUENCE = "sequence"
  val VOICE_BRIDGE = "voiceBridge"
  val WEB_VOICE = "webVoice"
  val LEARNING_DASHBOARD_ENABLED = "learningDashboardEnabled"
  val LEARNING_DASHBOARD_CLEANUP_DELAY_IN_MINUTES = "learningDashboardCleanupDelayInMinutes"
  val VIRTUAL_BACKGROUNDS_DISABLED = "virtualBackgroundsDisabled"
  val WEBCAMS_ONLY_FOR_MODERATOR = "webcamsOnlyForModerator"
  val MEETING_CAMERA_CAP = "meetingCameraCap"
  val USER_CAMERA_CAP = "userCameraCap"
  val MAX_PINNED_CAMERAS = "maxPinnedCameras"
  val MEETING_EXPIRE_IF_NO_USER_JOINED_IN_MINUTES = "meetingExpireIfNoUserJoinedInMinutes"
  val MEETING_EXPIRE_WHEN_LAST_USER_LEFT_IN_MINUTES = "meetingExpireWhenLastUserLeftInMinutes"
  val WELCOME = "welcome"
  val HTML5_INSTANCE_ID = "html5InstanceId"
  val ROLE = "role"
  val GROUPS = "groups"
  val DISABLED_FEATURES = "disabledFeatures"
  val NOTIFY_RECORDING_IS_ON = "notifyRecordingIsOn"

  val BREAKOUT_ROOMS_ENABLED = "breakoutRoomsEnabled"
  val BREAKOUT_ROOMS_RECORD = "breakoutRoomsRecord"
  val BREAKOUT_ROOMS_PRIVATE_CHAT_ENABLED = "breakoutRoomsPrivateChatEnabled"

  val LOCK_SETTINGS_DISABLE_CAM = "lockSettingsDisableCam"
  val LOCK_SETTINGS_DISABLE_MIC = "lockSettingsDisableMic"
  val LOCK_SETTINGS_DISABLE_PRIVATE_CHAT = "lockSettingsDisablePrivateChat"
  val LOCK_SETTINGS_DISABLE_PUBLIC_CHAT = "lockSettingsDisablePublicChat"
  val DEPRECATED_LOCK_SETTINGS_DISABLE_NOTES = "lockSettingsDisableNote"
  val LOCK_SETTINGS_DISABLE_NOTES = "lockSettingsDisableNotes"
  val LOCK_SETTINGS_HIDE_USER_LIST = "lockSettingsHideUserList"
  val LOCK_SETTINGS_LOCKED_LAYOUT = "lockSettingsLockedLayout"
  val LOCK_SETTINGS_LOCK_ON_JOIN = "lockSettingsLockOnJoin"
  val LOCK_SETTINGS_LOCK_ON_JOIN_CONFIGURABLE = "lockSettingsLockOnJoinConfigurable"
  val LOCK_SETTINGS_HIDE_VIEWERS_CURSOR = "lockSettingsHideViewersCursor"

  // New param passed on create call to callback when meeting ends.
  // This is a duplicate of the endCallbackUrl meta param as we want this
  // param to stay on the server and not propagated to client and recordings.
  val MEETING_ENDED_CALLBACK_URL = "meetingEndedURL"

  // Param to end the meeting when there are no moderators after a certain period of time.
  // Needed for classes where teacher gets disconnected and can't get back in. Prevents
  // students from running amok.
  val END_WHEN_NO_MODERATOR = "endWhenNoModerator"
  val END_WHEN_NO_MODERATOR_DELAY_IN_MINUTES = "endWhenNoModeratorDelayInMinutes"
}
