package org.bigbluebutton.core.db

import PostgresProfile.api._
import spray.json.JsValue
import scala.concurrent.ExecutionContext.Implicits.global
import scala.util.{Failure, Success}

case class PluginDataChannelMessageDbModel(
    meetingId:          String,
    pluginName:         String,
    dataChannel:        String,
//    messageId:        Option[String] = None, // The messageId is generated by the database
    messageInternalId:  Option[String],
    fromUserId:         String,
    messageContent:     JsValue,
    toRole:             Option[String],
    toUserId:           Option[String],
    createdAt:          java.sql.Timestamp,
)

class PluginDataChannelMessageDbTableDef(tag: Tag) extends Table[PluginDataChannelMessageDbModel](tag, None, "pluginDataChannelMessage") {
  val meetingId = column[String]("meetingId", O.PrimaryKey)
  val pluginName = column[String]("pluginName", O.PrimaryKey)
  val dataChannel = column[String]("dataChannel", O.PrimaryKey)
//  val messageId = column[Option[String]]("messageId", O.PrimaryKey)
  val messageInternalId = column[Option[String]]("messageInternalId")
  val fromUserId = column[String]("fromUserId")
  val messageContent = column[JsValue]("messageContent")
  val toRole = column[Option[String]]("toRole")
  val toUserId = column[Option[String]]("toUserId")
  val createdAt = column[java.sql.Timestamp]("createdAt")
  override def * = (meetingId, pluginName, dataChannel, messageInternalId, fromUserId, messageContent, toRole, toUserId, createdAt) <> (PluginDataChannelMessageDbModel.tupled, PluginDataChannelMessageDbModel.unapply)
}

object PluginDataChannelMessageDAO {
  def insert(meetingId: String, pluginName: String, dataChannel: String, messageInternalId: String, senderUserId: String, messageContent: String, toRole: String, toUserId: String) = {
    DatabaseConnection.db.run(
      TableQuery[PluginDataChannelMessageDbTableDef].forceInsert(
        PluginDataChannelMessageDbModel(
          meetingId = meetingId,
          pluginName = pluginName,
          dataChannel = dataChannel,
          messageInternalId = messageInternalId match {
            case "" => None
            case internalId => Some(internalId)
          },
//          messageId = None, // The messageId is generated by the database
          fromUserId = senderUserId,
          messageContent = JsonUtils.stringToJson(messageContent),
          toRole = toRole.toUpperCase match {
            case "MODERATOR" => Some("MODERATOR")
            case "VIEWER" => Some("VIEWER")
            case "PRESENTER" => Some("PRESENTER")
            case _ => None
          },
          toUserId = toUserId match {
            case "" => None
            case userId => Some(userId)
          },
          createdAt = new java.sql.Timestamp(System.currentTimeMillis())
        )
      )
    ).onComplete {
        case Success(rowsAffected) => DatabaseConnection.logger.debug(s"$rowsAffected row(s) inserted on PluginDataChannelMessage table!")
        case Failure(e)            => DatabaseConnection.logger.debug(s"Error inserting PluginDataChannelMessage: $e")
      }
  }
}